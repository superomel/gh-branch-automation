name: "[Hotfix][Create][PAT] Create hotfix"

on:
  workflow_dispatch:

jobs:
  create_branch:
    runs-on: ubuntu-latest

    steps:
      # - uses: actions/create-github-app-token@v2
      #   id: app-token
      #   with:
      #     app-id: ${{ vars.APP_ID }}
      #     private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

      - name: Generate branch name from current date
        id: gen
        run: |
          BRANCH_NAME="hotfix/$(date +'%Y-%m-%d')"
          echo "branch=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: production
          # token: ${{ steps.app-token.outputs.token }}
          token: ${{ secrets.DEVIOPS_PAT }}

      - name: Configure Git
        run: |
          git config --global user.name "conint-release-automation"
          git config --global user.email "conint-release-automation@github.com"

      - name: Check if branch already exists
        id: check_branch
        run: |
          OTHER_RELEASE=$(git ls-remote --heads origin | grep -E 'refs/heads/hotfix[/-]' | grep -v production || true)

          if git ls-remote --exit-code --heads origin "${{ steps.gen.outputs.branch }}"; then
            echo "Branch ${{ steps.gen.outputs.branch }} already exists. Skipping workflow."
            echo "exists=true" >> "$GITHUB_OUTPUT"
            exit 1
          elif [[ -n "$OTHER_RELEASE" ]]; then
            echo "Branches "$OTHER_RELEASE" with hotfixes already exists. Skipping workflow."
            echo "exists=true" >> "$GITHUB_OUTPUT"
            exit 1
          else
            echo "Branch ${{ steps.gen.outputs.branch }} does not exist. Proceeding."
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create new branch and commit
        if: steps.check_branch.outputs.exists == 'false'
        run: |
          git checkout -b ${{ steps.gen.outputs.branch }}
          echo "Auto-generated file at $(date)" > .release.txt
          git add .release.txt
          git commit -m "Auto: Add unique file to trigger PR"
          git push origin ${{ steps.gen.outputs.branch }}

      - name: Set branch protection
        if: steps.check_branch.outputs.exists == 'false'
        run: |
          curl -X PUT \
            -H "Authorization: token ${{ secrets.DEVIOPS_PAT }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/branches/${{ steps.gen.outputs.branch }}/protection \
            -d '{
              "required_status_checks": null,
              "enforce_admins": true,
              "required_pull_request_reviews": {
                "dismiss_stale_reviews": true,
                "required_approving_review_count": 1
              },
              "restrictions": null
            }'

      - name: Create Pull Request
        if: steps.check_branch.outputs.exists == 'false'
        env:
          # GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ secrets.DEVIOPS_PAT }}
        run: |
          gh pr create --title "[Hotfix] ${{ steps.gen.outputs.branch }}" \
                       --body "Automated PR with protection" \
                       --base production \
                       --head ${{ steps.gen.outputs.branch }}

      - name: Create back Pull Request
        if: steps.check_branch.outputs.exists == 'false'
        env:
          # GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GH_TOKEN: ${{ secrets.DEVIOPS_PAT }}
        run: |
          gh pr create --title "[Hotfix][Return] ${{ steps.gen.outputs.branch }}" \
                       --body "Automated PR with protection" \
                       --base main \
                       --head ${{ steps.gen.outputs.branch }}

